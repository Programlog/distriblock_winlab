# Generated 2024-05-10 from:
# /home/pizarm5k/speechbrain/Librispeech/ASR/distriblock_transformer/hparams/transformer.yaml
# yamllint disable
# ############################################################################
# Model: E2E ASR with Transformer
# Encoder: Transformer Encoder
# Decoder: Transformer Decoder + (CTC/ATT joint) beamsearch + TransformerLM
# Tokens: unigram
# losses: CTC + KLdiv (Label Smoothing loss)
# Training: Librispeech 960h
# Authors:  Jianyuan Zhong, Titouan Parcollet, Samuele Cornell
# ############################################################################
# Seed needs to be set at top of yaml, before objects with parameters are made

seed: 74443
__set_seed: !apply:torch.manual_seed [74443]
output_folder: results/transformer/74443
wer_file: results/transformer/74443/wer.txt
save_folder: results/transformer/74443/save
train_log: results/transformer/74443/train_log.txt

# Language model (LM) pretraining
# NB: To avoid mismatch, the speech recognizer must be trained with the same
# tokenizer used for LM training. Here, we download everything from the
# speechbrain HuggingFace repository. However, a local path pointing to a
# directory containing the lm.ckpt and tokenizer.ckpt may also be specified
# instead. E.g if you want to use your own LM / tokenizer.
pretrained_lm_tokenizer_path: speechbrain/asr-transformer-transformerlm-librispeech

# Data files
data_folder: /USERSPACE/DATASETS/LibriSpeech/
                          # e.g., /path/to/LibriSpeech
# If RIRS_NOISES dir exists in /localscratch/xxx_corpus/RIRS_NOISES
# then data_folder_rirs should be /localscratch/xxx_corpus
# otherwise the dataset will automatically be downloaded
# data_folder_rirs: !ref <data_folder>
train_splits: [train-clean-100, train-clean-360, train-other-500]
dev_splits: [dev-clean]
test_splits: [test-clean, test-other]
skip_prep: false
train_csv: results/transformer/74443/train.csv
valid_csv: results/transformer/74443/dev-clean.csv
test_csv:
- results/transformer/74443/test-clean.csv
- results/transformer/74443/test-other.csv

ckpt_interval_minutes: 30 # save checkpoint every N min

# DistriBlock Hyperparameters
attack_type: CW
output_type: DistriBlock_data
characteristic_folder: DistriBlock_data/CW/

train_transcriptions: results/transformer/74443/src_train_trans.csv
val_transcriptions: results/transformer/74443/src_val_trans.csv
test_transcriptions: results/transformer/74443/src_test_trans.csv
adv_train_transcription: results/transformer/74443/adv_train_trans.csv
adv_test_transcriptions: results/transformer/74443/adv_test_trans.csv

# Training parameters
# To make Transformers converge, the global bath size should be large enough.
# The global batch size is computed as batch_size * n_gpus * gradient_accumulation.
# Empirically, we found that this value should be >= 128.
# Please, set your parameters accordingly.
number_of_epochs: 100
batch_size: 1 # 32 # This works for 1x GPU with 40GB with no dynamic batching
ctc_weight: 0.3
grad_accumulation_factor: 1
max_grad_norm: 5.0
loss_reduction: batchmean
sorting: random
num_workers: 4

# This setup works well for V100 32GB GPU, adapts it to your needs.
# Or turn it off (but training speed will decrease)
dynamic_batching: true
max_batch_len: 600
max_batch_len_val: 100 # we reduce it as the beam is much wider (VRAM)
num_bucket: 200

dynamic_batch_sampler:
  max_batch_len: 600
  max_batch_len_val: 100
  num_buckets: 200
  shuffle_ex: true   # if true re-creates batches at each epoch shuffling examples.
  batch_ordering: random
  max_batch_ex: 128

# stages related parameters
lr_adam: 0.001

# Feature parameters
sample_rate: 16000
n_fft: 400
n_mels: 80

# Dataloader options
train_dataloader_opts:
  batch_size: 1
  shuffle: true
  num_workers: 4

valid_dataloader_opts:
  batch_size: 1

test_dataloader_opts:
  batch_size: 1

####################### Model parameters ###########################
# Transformer
d_model: 512
nhead: 4
num_encoder_layers: 12
num_decoder_layers: 6
d_ffn: 2048
transformer_dropout: 0.1
activation: &id001 !name:torch.nn.GELU
output_neurons: 5000

# Outputs
blank_index: 0
label_smoothing: 0.0
pad_index: 0
bos_index: 1
eos_index: 2

# Decoding parameters
min_decode_ratio: 0.0
max_decode_ratio: 1.0
valid_search_interval: 10
valid_beam_size: 10
test_beam_size: 66
lm_weight: 0.60
ctc_weight_decode: 0.40

############################## models ################################

CNN: &id002 !new:speechbrain.lobes.models.convolution.ConvolutionFrontEnd
  input_shape: (8, 10, 80)
  num_blocks: 3
  num_layers_per_block: 1
  out_channels: (64, 64, 64)
  kernel_sizes: (5, 5, 1)
  strides: (2, 2, 1)
  residuals: (False, False, True)

Transformer: &id003 !new:speechbrain.lobes.models.transformer.TransformerASR.TransformerASR
                                                                                     # yamllint disable-line rule:line-length
  input_size: 1280
  tgt_vocab: 5000
  d_model: 512
  nhead: 4
  num_encoder_layers: 12
  num_decoder_layers: 6
  d_ffn: 2048
  dropout: 0.1
  activation: *id001
  encoder_module: transformer
  attention_type: regularMHA
  normalize_before: true
  causal: false

# This is the TransformerLM that is used according to the Huggingface repository
# Visit the HuggingFace model corresponding to the pretrained_lm_tokenizer_path
# For more details about the model!
# NB: It has to match the pre-trained TransformerLM!!
lm_model: &id006 !new:speechbrain.lobes.models.transformer.TransformerLM.TransformerLM
                                                                                # yamllint disable-line rule:line-length
  vocab: 5000
  d_model: 768
  nhead: 12
  num_encoder_layers: 12
  num_decoder_layers: 0
  d_ffn: 3072
  dropout: 0.0
  activation: !name:torch.nn.GELU
  normalize_before: false

tokenizer: &id011 !new:sentencepiece.SentencePieceProcessor

ctc_lin: &id005 !new:speechbrain.nnet.linear.Linear
  input_size: 512
  n_neurons: 5000

seq_lin: &id004 !new:speechbrain.nnet.linear.Linear
  input_size: 512
  n_neurons: 5000

modules:
  CNN: *id002
  Transformer: *id003
  seq_lin: *id004
  ctc_lin: *id005
  normalize: &id009 !new:speechbrain.processing.features.InputNormalization

    norm_type: global
    update_until_epoch: 4

model: &id007 !new:torch.nn.ModuleList
- [*id002, *id003, *id004, *id005]
Adam: !name:torch.optim.Adam
  lr: 0.001
  betas: (0.9, 0.98)
  eps: 0.000000001


valid_search: !new:speechbrain.decoders.S2STransformerBeamSearch
  modules: [*id003, *id004, *id005]
  bos_index: 1
  eos_index: 2
  blank_index: 0
  min_decode_ratio: 0.0
  max_decode_ratio: 1.0
  beam_size: 10
  ctc_weight: 0.40
  using_eos_threshold: false
  length_normalization: false


test_search: !new:speechbrain.decoders.S2STransformerBeamSearch
  modules: [*id003, *id004, *id005]
  bos_index: 1
  eos_index: 2
  blank_index: 0
  min_decode_ratio: 0.0
  max_decode_ratio: 1.0
  beam_size: 66
  ctc_weight: 0.40
  lm_weight: 0.60
  lm_modules: *id006
  temperature: 1.15
  temperature_lm: 1.15
  using_eos_threshold: false
  length_normalization: true

log_softmax: !new:torch.nn.LogSoftmax
  dim: -1

ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
  blank_index: 0
  reduction: batchmean

seq_cost: !name:speechbrain.nnet.losses.kldiv_loss
  label_smoothing: 0.0
  reduction: batchmean

noam_annealing: &id008 !new:speechbrain.nnet.schedulers.NoamScheduler
  lr_initial: 0.001
  n_warmup_steps: 25000

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
  checkpoints_dir: results/transformer/74443/save
  recoverables:
    model: *id007
    noam_scheduler: *id008
    normalizer: *id009
    counter: &id010 !new:speechbrain.utils.epoch_loop.EpochCounter

      limit: 100

epoch_counter: *id010
normalize: *id009
augmentation: !new:speechbrain.lobes.augment.SpecAugment
  time_warp: false
  time_warp_window: 5
  time_warp_mode: bicubic
  freq_mask: true
  n_freq_mask: 4
  time_mask: true
  n_time_mask: 4
  replace_with_zero: false
  freq_mask_width: 15
  time_mask_width: 20

speed_perturb: !new:speechbrain.processing.speech_augmentation.SpeedPerturb
  orig_freq: 16000
  speeds: [95, 100, 105]

compute_features: !new:speechbrain.lobes.features.Fbank
  sample_rate: 16000
  n_fft: 400
  n_mels: 80

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
  save_file: results/transformer/74443/train_log.txt

error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
acc_computer: !name:speechbrain.utils.Accuracy.AccuracyStats

# The pretrainer allows a mapping between pretrained files and instances that
# are declared in the yaml. E.g here, we will download the file lm.ckpt
# and it will be loaded into "lm" which is pointing to the <lm_model> defined
# before.
pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
  collect_in: results/transformer/74443/save
  loadables:
    lm: *id006
    tokenizer: *id011
  paths:
    lm: speechbrain/asr-transformer-transformerlm-librispeech/lm.ckpt
    tokenizer: speechbrain/asr-transformer-transformerlm-librispeech/tokenizer.ckpt
